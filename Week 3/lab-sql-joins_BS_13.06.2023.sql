#Challenge - Joining on multiple tables

#Write SQL queries to perform the following tasks using the Sakila database:
USE sakila;

#1.List the number of films per category.
SELECT count(film_category.film_id) AS number_of_films, category.name
FROM film_category
JOIN category
ON film_category.category_id = category.category_id
GROUP BY category.name;

#2.Retrieve the store ID, city, and country for each store.
SELECT store_id, city, country
FROM store 
JOIN address ON store.address_id = address.address_id
JOIN city ON address.city_id = city.city_id
JOIN country ON city.country_id = country.country_id;

#3.Calculate the total revenue generated by each store in dollars.
SELECT store.store_id, SUM(payment.amount) AS total_revenue
FROM store 
JOIN staff ON store.store_id = staff.store_id
JOIN payment ON staff.staff_id = payment.staff_id
GROUP BY store.store_id;

#4.Determine the average running time of films for each category.
SELECT category.category_id, category.name AS category_name, 
AVG(film.length) AS average_running_time
FROM film 
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
GROUP BY category.category_id, category.name;

#5.Identify the film categories with the longest average running time.
SELECT category_id, name, AVG(length) AS average_running_time
FROM film_category
JOIN film USING (film_id)
JOIN category USING (category_id)
GROUP BY category_id, name
ORDER BY average_running_time DESC
LIMIT 3;

#6.Display the top 10 most frequently rented movies in descending order.
SELECT film.film_id, film.title, COUNT(*) AS rental_count
FROM film
JOIN inventory USING (film_id)
JOIN rental USING (inventory_id)
GROUP BY film.film_id, film.title
ORDER BY rental_count DESC
LIMIT 10;

#7.Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT IF(COUNT(*) > 0, 'Yes', 'No') AS can_be_rented
FROM film
JOIN inventory USING (film_id)
WHERE film.title LIKE '%Academy Dinosaur%'
  AND inventory.store_id = 1;


